{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.ce24cffeba8ade97c149.hot-update.js","sources":["webpack:///./components/layout/AddBar/AddBar.jsx","webpack:///./node_modules/react-spring/web.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport toast from 'toasted-notes';\r\nimport 'toasted-notes/src/styles.css';\r\n\r\n// **** COMPONENTS IMPORTS ****\r\nimport AddIcon from '../../svg/add-icon';\r\nimport Bar from '../Bar';\r\nimport Form from './Form';\r\nimport Input from './Input';\r\nimport Select from '../Form/Select';\r\nimport Wrapper from './Wrapper';\r\nimport SubmitInput from './SubmitInput';\r\nimport CategoryColor from '../../CategoryColor';\r\nimport AddCategory from './AddCategory';\r\nimport Notification from '../Notification/Notification';\r\n\r\n// **** HELPERS *****/\r\nimport getRandomColor from './helpers/getRandomColor';\r\nimport getAlias from './helpers/getAlias';\r\n\r\n// ***** STYLES *****\r\nconst actionIconStyle = {\r\n  width: 'auto',\r\n  height: '20px',\r\n  padding: '10px'\r\n};\r\n\r\nconst positionIcon = {\r\n  position: 'absolute',\r\n  left: '10px',\r\n  top: '10px'\r\n};\r\n\r\n// ***** COMPONENT *****\r\nclass AddBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      categoryValue: null,\r\n      newCategoryValue: '',\r\n      subcategoryValue: '',\r\n      urlValue: '',\r\n      subcategories: [],\r\n      categoryColor: '',\r\n      isNewCategoryOpen: false,\r\n      isNewSubcategoryOpen: false\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // if categories got loaded before component did mount\r\n    // set initial category to first one loaded from server\r\n    if (this.props.categories[0]) {\r\n      this.setState({\r\n        categoryValue: this.props.categories[0],\r\n        categoryColor: this.props.categories[0].color,\r\n        subcategories: this.props.categories[0].subcategories,\r\n        subcategoryValue: this.props.categories[0].subcategories[0].name\r\n      });\r\n    } else {\r\n      this.setState({\r\n        categoryValue: {}\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate = prevProps => {\r\n    // if categories get loaded from server after componentDidMount\r\n    // set initial category to first one loaded from server\r\n    if (this.props.categories !== prevProps.categories) {\r\n      this.setState({\r\n        categoryValue: this.props.categories[0],\r\n        categoryColor: this.props.categories[0].color,\r\n        subcategories: this.props.categories[0].subcategories,\r\n        subcategoryValue: this.props.categories[0].subcategories[0].name\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n    // TODO\r\n    // validation\r\n    // userID from server\r\n\r\n    // create request body to add new article to mongoDB\r\n    const {\r\n      categoryValue,\r\n      subcategoryValue,\r\n      urlValue,\r\n      categoryColor,\r\n      newCategoryValue,\r\n      isNewCategoryOpen,\r\n      isNewSubcategoryOpen\r\n    } = this.state;\r\n\r\n    const articleBody = {\r\n      url: urlValue,\r\n      user: '5d3771a273caf9266425905b',\r\n      category: categoryValue._id,\r\n      subcategory: subcategoryValue\r\n    };\r\n\r\n    // if we're not creating new subcategory or category\r\n    // then add new article to db\r\n    if (!isNewCategoryOpen && !isNewSubcategoryOpen) {\r\n      try {\r\n        const { data } = await axios.post('/api/articles', articleBody);\r\n        toast.notify(\r\n          <Notification\r\n            title={data.title}\r\n            color={data.category.color}\r\n            category={data.category.name}\r\n            action=\"success\"\r\n          />,\r\n          { position: 'bottom-right' }\r\n        );\r\n        return;\r\n      } catch (err) {\r\n        toast.notify(<Notification action=\"error\" />, {\r\n          position: 'bottom-right'\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    //\r\n    // if we're creating only new subcategory\r\n    // then update category with it and add new article to db\r\n    if (isNewSubcategoryOpen && !isNewCategoryOpen) {\r\n      const subcategoryBody = {\r\n        subcategory: {\r\n          name: subcategoryValue,\r\n          alias: getAlias(subcategoryValue)\r\n        }\r\n      };\r\n\r\n      try {\r\n        const { data } = await axios.post('/api/articles', articleBody);\r\n        const updatedCategory = await axios.put(\r\n          `/api/categories/${categoryValue._id}`,\r\n          subcategoryBody\r\n        );\r\n        toast.notify(\r\n          <Notification\r\n            subcategory={data.subcategory}\r\n            color={data.category.color}\r\n            category={data.category.name}\r\n            action=\"newSubcategory\"\r\n          />,\r\n          { position: 'bottom-right' }\r\n        );\r\n        toast.notify(\r\n          <Notification\r\n            title={data.title}\r\n            color={data.category.color}\r\n            category={data.category.name}\r\n            action=\"success\"\r\n          />,\r\n          { position: 'bottom-right' }\r\n        );\r\n        return;\r\n      } catch (err) {\r\n        toast.notify(<Notification action=\"error\" />, {\r\n          position: 'bottom-right'\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // if we're creating new category\r\n    // then add new category and then new article to db\r\n    if (isNewCategoryOpen) {\r\n      // save new category to database\r\n      const categoryBody = {\r\n        name: newCategoryValue,\r\n        alias: getAlias(newCategoryValue),\r\n        color: categoryColor,\r\n        subcategory: {\r\n          name: subcategoryValue,\r\n          alias: getAlias(subcategoryValue)\r\n        },\r\n        userID: '5d3771a273caf9266425905b'\r\n      };\r\n\r\n      try {\r\n        const newCategory = await axios.post('/api/categories/', categoryBody);\r\n\r\n        toast.notify(\r\n          <Notification\r\n            color={newCategory.data.color}\r\n            category={newCategory.data.name}\r\n            action=\"newCategory\"\r\n          />,\r\n          { position: 'bottom-right' }\r\n        );\r\n\r\n        const articleBody = {\r\n          url: urlValue,\r\n          user: '5d3771a273caf9266425905b',\r\n          category: newCategory.data._id,\r\n          subcategory: subcategoryValue\r\n        };\r\n\r\n        const { data } = await axios.post('/api/articles', articleBody);\r\n\r\n        toast.notify(\r\n          <Notification\r\n            title={data.title}\r\n            color={data.category.color}\r\n            category={data.category.name}\r\n            action=\"success\"\r\n          />,\r\n          { position: 'bottom-right' }\r\n        );\r\n\r\n        this.forceUpdate();\r\n\r\n        return;\r\n      } catch (err) {\r\n        toast.notify(<Notification action=\"error\" />, {\r\n          position: 'bottom-right'\r\n        });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  handleUrlChange = e => {\r\n    this.setState({\r\n      urlValue: e.target.value\r\n    });\r\n  };\r\n\r\n  handleCategoryChange = e => {\r\n    // find current category object by id given in select value\r\n    const { categories } = this.props;\r\n    const currentCategory = categories.find(\r\n      category => category._id === e.target.value\r\n    );\r\n    // if we're not going to add new subcategory then make first one default\r\n    if (!this.state.isNewSubcategoryOpen) {\r\n      this.setState({\r\n        categoryValue: currentCategory,\r\n        categoryColor: currentCategory.color,\r\n        subcategories: currentCategory.subcategories,\r\n        subcategoryValue: currentCategory.subcategories[0].name\r\n      });\r\n      // if we're going to add new subcategory then do not change its value\r\n    } else {\r\n      this.setState({\r\n        categoryValue: currentCategory,\r\n        categoryColor: currentCategory.color,\r\n        subcategories: currentCategory.subcategories\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSubcategoryChange = e => {\r\n    this.setState({\r\n      subcategoryValue: e.target.value\r\n    });\r\n  };\r\n\r\n  handleNewCategoryChange = e => {\r\n    this.setState({\r\n      newCategoryValue: e.target.value\r\n    });\r\n  };\r\n\r\n  onNewSubcategoryClick = e => {\r\n    if (this.state.isNewSubcategoryOpen) {\r\n      this.setState({\r\n        //state when subcategory is going to return to select\r\n        isNewSubcategoryOpen: !this.state.isNewSubcategoryOpen,\r\n        subcategoryValue: this.props.categories[0].subcategories[0].name\r\n      });\r\n    } else {\r\n      this.setState({\r\n        // state when subcategory is going to be an input\r\n        isNewSubcategoryOpen: !this.state.isNewSubcategoryOpen,\r\n        subcategoryValue: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  onNewCategoryClick = e => {\r\n    if (this.state.isNewCategoryOpen) {\r\n      // state when category is going to return to select\r\n      this.setState({\r\n        isNewCategoryOpen: !this.state.isNewCategoryOpen,\r\n        categoryColor: this.props.categories[0].color,\r\n        newCategoryValue: ''\r\n      });\r\n    } else {\r\n      // state when category is going to be an input\r\n      this.setState({\r\n        isNewCategoryOpen: !this.state.isNewCategoryOpen,\r\n        categoryColor: getRandomColor(),\r\n        newCategoryValue: '',\r\n        subcategoryValue: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  onCategoryColorClick = e => {\r\n    if (this.state.isNewCategoryOpen) {\r\n      this.setState({ categoryColor: getRandomColor() });\r\n    }\r\n  };\r\n\r\n  getCategoryChoice = isNewCategoryOpen => {\r\n    // if we're going to add new category make category-choice an input\r\n    if (isNewCategoryOpen) {\r\n      return (\r\n        <Input\r\n          type=\"text\"\r\n          name=\"category-choice\"\r\n          placeholder=\"New category name...\"\r\n          value={this.state.newCategoryValue}\r\n          onChange={this.handleNewCategoryChange}\r\n          thick\r\n        />\r\n      );\r\n      // if we're not going to add new category than make category-choice a select\r\n    } else {\r\n      return (\r\n        <Select name=\"category-choice\" onChange={this.handleCategoryChange}>\r\n          {this.props.categories.map(category => {\r\n            return (\r\n              <option value={category._id} key={category._id}>\r\n                {category.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </Select>\r\n      );\r\n    }\r\n  };\r\n\r\n  getSubcategoryChoice = (isNewSubcategoryOpen, isNewCategoryOpen) => {\r\n    // if we're going to add new subcategory || category make subcategory-choice an input\r\n    if (isNewSubcategoryOpen || isNewCategoryOpen) {\r\n      return (\r\n        <Input\r\n          type=\"text\"\r\n          name=\"subcategory-choice\"\r\n          placeholder=\"New subcategory name...\"\r\n          value={this.state.subcategoryValue}\r\n          onChange={this.handleSubcategoryChange}\r\n          thick\r\n        />\r\n      );\r\n      // if we're not going to add new category than make category-choice a select\r\n    } else {\r\n      return (\r\n        <Select\r\n          name=\"subcategory-choice\"\r\n          onChange={this.handleSubcategoryChange}\r\n        >\r\n          {this.state.subcategories.map(subcategory => {\r\n            return (\r\n              <option value={subcategory.name} key={subcategory._id}>\r\n                {subcategory.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </Select>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isNewSubcategoryOpen,\r\n      isNewCategoryOpen,\r\n      categoryValue,\r\n      categoryColor\r\n    } = this.state;\r\n\r\n    const categoryChoice = this.getCategoryChoice(isNewCategoryOpen);\r\n    const subcategoryChoice = this.getSubcategoryChoice(\r\n      isNewSubcategoryOpen,\r\n      isNewCategoryOpen\r\n    );\r\n\r\n    return (\r\n      <Bar isOpen={this.props.isOpen}>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"url\"\r\n              placeholder=\"URL goes here https://...\"\r\n              value={this.state.urlValue}\r\n              onChange={this.handleUrlChange}\r\n              wide\r\n            />\r\n            <Wrapper>\r\n              <CategoryColor\r\n                color={categoryColor}\r\n                onClick={this.onCategoryColorClick}\r\n                switchmode={isNewCategoryOpen}\r\n              />\r\n              {categoryChoice}\r\n              {subcategoryChoice}\r\n            </Wrapper>\r\n            <Wrapper>\r\n              <AddCategory onClick={this.onNewCategoryClick}>\r\n                {isNewCategoryOpen ? '< Existing category' : '+ New category'}\r\n              </AddCategory>\r\n              {!isNewCategoryOpen && (\r\n                <AddCategory onClick={this.onNewSubcategoryClick}>\r\n                  {isNewSubcategoryOpen\r\n                    ? '< Existing subcategory'\r\n                    : '+ New subcategory'}\r\n                </AddCategory>\r\n              )}\r\n            </Wrapper>\r\n          </div>\r\n          <label style={{ position: 'relative', display: 'inline-block' }}>\r\n            <SubmitInput type=\"submit\" value=\"\" />\r\n            <AddIcon style={actionIconStyle} positionicon={positionIcon} />\r\n          </label>\r\n        </Form>\r\n      </Bar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddBar;\r\n","export * from '@react-spring/web';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAPA;AAiBA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AA1BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AA4BA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AApCA;AACA;AADA;AAAA;AAAA;AAwCA;AAAA;AAAA;AACA;AADA;AAxCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAiDA;AACA;AACA;AACA;AAFA;AADA;AAlDA;AAAA;AAAA;AACA;AADA;AAAA;AA0DA;AA1DA;AAAA;AACA;AADA;AA2DA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AA/EA;AACA;AADA;AAAA;AAAA;AAmFA;AAAA;AAAA;AACA;AADA;AAnFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AA4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AA9FA;AAAA;AAAA;AACA;AADA;AA0GA;AAEA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAJA;AArHA;AAAA;AACA;AADA;AAAA;AA4HA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAEA;AACA;AAzIA;AACA;AADA;AAAA;AAAA;AA4IA;AAAA;AAAA;AACA;AADA;AA5IA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7CA;AAAA;AAAA;AAAA;AACA;AADA;AAiMA;AACA;AADA;AAGA;AACA;AArMA;AAuMA;AADA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA7NA;AA+NA;AACA;AADA;AAGA;AACA;AAnOA;AAqOA;AACA;AADA;AAGA;AACA;AAzOA;AA2OA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAzPA;AA2PA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AA5QA;AA8QA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAlRA;AAoRA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AA/SA;AAiTA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AA7UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAYA;AACA;;;AAmUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AAHA;AASA;AAAA;AAIA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;;;;AAxYA;AACA;AA0YA;;;;;;;;;;;;AC9aA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}